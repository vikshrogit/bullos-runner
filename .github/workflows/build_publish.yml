name: Build and Publish bullos-gh-runner image

on:
  push:
    branches:
      - main
  workflow_dispatch:

env:
  IMAGE_NAME: bullos-gh-runner

permissions:
  contents: write

jobs:
  set-version:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    outputs:
      image_version: ${{ steps.set-version.outputs.version }}
      bump_type: ${{ steps.set-version.outputs.bump_type }}
      bump_commits: ${{ steps.set-version.outputs.bump_commits }}
    steps:
      - name: Checkout repo
        uses: actions/checkout@v5
      - name: Fetch tags
        run: git fetch --tags
      - name: Determine next semantic version
        id: set-version
        run: |
          LATEST_TAG=$(git tag --sort=-v:refname | head -n1)
          if [ -z "$LATEST_TAG" ]; then
            NEXT_TAG="v0.0.1"
            BUMP_TYPE="initial"
            BUMP_COMMITS="All commits in repo"
          else
            VERSION_NUM=${LATEST_TAG#v}
            IFS='.' read -r MAJOR MINOR PATCH <<< "$VERSION_NUM"
            COMMITS=$(git log ${LATEST_TAG}..HEAD --pretty=format:"%s")
            BUMP_TYPE="patch"; BUMP_COMMITS=""
            if echo "$COMMITS" | grep -q "BREAKING CHANGE"; then
              BUMP_TYPE="major"
            elif echo "$COMMITS" | grep -q "^feat"; then
              BUMP_TYPE="minor"
            fi
            case $BUMP_TYPE in
              major) MAJOR=$((MAJOR+1)); MINOR=0; PATCH=0 ;;
              minor) MINOR=$((MINOR+1)); PATCH=0 ;;
              patch) PATCH=$((PATCH+1)) ;;
            esac
            NEXT_TAG="v$MAJOR.$MINOR.$PATCH"
            BUMP_COMMITS="$COMMITS"
          fi
          echo "version=$NEXT_TAG" >> $GITHUB_OUTPUT
          echo "bump_type=$BUMP_TYPE" >> $GITHUB_OUTPUT
          echo "bump_commits=$BUMP_COMMITS" >> $GITHUB_OUTPUT

  build-and-push-linux:
    needs: set-version
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
      security-events: write
    steps:
      - name: Checkout repo
        uses: actions/checkout@v5
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      - name: Set up Buildx
        uses: docker/setup-buildx-action@v3
      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Build and push Linux multi-arch image
        uses: docker/build-push-action@v6
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: |
            ghcr.io/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}:${{ needs.set-version.outputs.image_version }}
            ghcr.io/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}:latest
      - name: Scan Linux image with Trivy
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ghcr.io/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}:${{ needs.set-version.outputs.image_version }}
          format: sarif
          output: trivy-linux.sarif
        continue-on-error: true
      - name: Upload Linux SARIF
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: trivy-linux.sarif
        continue-on-error: true

  # build-and-push-windows:
  #   needs: set-version
  #   runs-on: windows-latest # ⚠️ Prefer self-hosted Windows runner
  #   permissions:
  #     contents: write
  #     packages: write
  #     security-events: write
  #   steps:
  #     - name: Checkout repo
  #       uses: actions/checkout@v5
  #     - name: Login to GHCR
  #       uses: docker/login-action@v3
  #       with:
  #         registry: ghcr.io
  #         username: ${{ github.actor }}
  #         password: ${{ secrets.GITHUB_TOKEN }}
  #     - name: Build and push Windows image
  #       run: |
  #         docker build -f Dockerfile.windows `
  #           -t ghcr.io/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}:${{ needs.set-version.outputs.image_version }}-windows `
  #           .
  #         docker push ghcr.io/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}:${{ needs.set-version.outputs.image_version }}-windows
  #     - name: Install Trivy on Windows
  #       shell: pwsh
  #       run: |
  #         Invoke-WebRequest -Uri https://github.com/aquasecurity/trivy/releases/latest/download/trivy_0.56.2_Windows-64bit.zip -OutFile trivy.zip
  #         Expand-Archive trivy.zip -DestinationPath $env:USERPROFILE\trivy
  #         echo "$env:USERPROFILE\trivy" >> $env:GITHUB_PATH
  #     - name: Scan Windows image with Trivy
  #       shell: pwsh
  #       run: |
  #         trivy image --format sarif `
  #           --output trivy-windows.sarif `
  #           ghcr.io/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}:${{ needs.set-version.outputs.image_version }}-windows
  #     - name: Upload Windows SARIF
  #       uses: github/codeql-action/upload-sarif@v3
  #       with:
  #         sarif_file: trivy-windows.sarif
  #       continue-on-error: true

  release:
    needs: [set-version, build-and-push-linux]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v5
      - name: Create Git tag and push
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git tag ${{ needs.set-version.outputs.image_version }}
          git push origin ${{ needs.set-version.outputs.image_version }}
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ needs.set-version.outputs.image_version }}
          name: Release ${{ needs.set-version.outputs.image_version }}
          body: |
            **Release Type:** ${{ needs.set-version.outputs.bump_type }}

            **Commits in this release:**
            ${{ needs.set-version.outputs.bump_commits }}

            **Docker Images:**
            - Linux multi-arch:
              ghcr.io/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}:${{ needs.set-version.outputs.image_version }}
              ghcr.io/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}:latest
#            - Windows:
#              ghcr.io/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}:${{ needs.set-version.outputs.image_version }}-windows
