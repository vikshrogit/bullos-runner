name: Build and Publish bullos-gh-runner image

on:
  push:
    branches:
      - main
  workflow_dispatch:

env:
  IMAGE_NAME: bullos-gh-runner

permissions:
  contents: write

jobs:
  set-version:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    outputs:
      image_version: ${{ steps.set-version.outputs.version }}
      bump_type: ${{ steps.set-version.outputs.bump_type }}
      bump_commits: ${{ steps.set-version.outputs.bump_commits }}
    steps:
      - name: Checkout repo
        uses: actions/checkout@v5
      - name: Fetch tags
        run: git fetch --tags
      - name: Determine next semantic version
        id: set-version
        run: |
          LATEST_TAG=$(git tag --sort=-v:refname | head -n1)
          if [ -z "$LATEST_TAG" ]; then
            NEXT_TAG="v0.0.1"
            BUMP_TYPE="initial"
            BUMP_COMMITS="All commits in repo"
          else
            VERSION_NUM=${LATEST_TAG#v}
            IFS='.' read -r MAJOR MINOR PATCH <<< "$VERSION_NUM"
            COMMITS=$(git log ${LATEST_TAG}..HEAD --pretty=format:"%s")
            BUMP_TYPE="patch"; BUMP_COMMITS=""
            if echo "$COMMITS" | grep -q "BREAKING CHANGE"; then
              BUMP_TYPE="major"
            elif echo "$COMMITS" | grep -q "^feat"; then
              BUMP_TYPE="minor"
            fi
            case $BUMP_TYPE in
              major) MAJOR=$((MAJOR+1)); MINOR=0; PATCH=0 ;;
              minor) MINOR=$((MINOR+1)); PATCH=0 ;;
              patch) PATCH=$((PATCH+1)) ;;
            esac
            NEXT_TAG="v$MAJOR.$MINOR.$PATCH"
            BUMP_COMMITS="$COMMITS"
          fi
          echo "version=$NEXT_TAG" >> $GITHUB_OUTPUT
          echo "bump_type=$BUMP_TYPE" >> $GITHUB_OUTPUT
          echo "bump_commits=$BUMP_COMMITS" >> $GITHUB_OUTPUT

  build-and-push-linux:
    needs: set-version
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
      security-events: write
    outputs:
      DIGEST_AMD64: ${{ steps.linux-digests.outputs.DIGEST_AMD64 }}
      DIGEST_ARM64: ${{ steps.linux-digests.outputs.DIGEST_ARM64 }}
      DIGEST_UNKNOWN: ${{ steps.linux-digests.outputs.DIGEST_UNKNOWN }}
      runner_version: ${{ steps.runner-version.outputs.runner_version }}
    steps:
      - name: Checkout repo
        uses: actions/checkout@v5
      
      - name: Show bump info
        run: |
          echo "Image version: ${{ needs.set-version.outputs.image_version }}"
          echo "Bump type: ${{ needs.set-version.outputs.bump_type }}"
          echo "Commits causing bump:"
          echo "${{ needs.set-version.outputs.bump_commits }}"
      
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
        with:
          platforms: linux/amd64,linux/arm64

      
      - name: Get latest GitHub Actions runner version
        id: runner-version
        run: |
          # Fetch latest release from GitHub API
          LATEST_VERSION=$(curl -s https://api.github.com/repos/actions/runner/releases/latest | jq -r '.tag_name' || echo "v2.328.0")
          echo "Latest runner version: $LATEST_VERSION"
          
          # Remove 'v' prefix if exists
          LATEST_VERSION_CLEAN=${LATEST_VERSION#v}
          echo "runner_version=$LATEST_VERSION_CLEAN" >> $GITHUB_OUTPUT
      
      - name: Set up Buildx
        uses: docker/setup-buildx-action@v3
      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Build and push Linux multi-arch image
        uses: docker/build-push-action@v6
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: |
            ghcr.io/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}:${{ needs.set-version.outputs.image_version }}
            ghcr.io/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}:latest
          build-args: |
            IMAGE_VERSION=${{ needs.set-version.outputs.image_version }}
            RUNNER_VERSION=${{ steps.runner-version.outputs.runner_version }}
          labels: |
            org.opencontainers.image.source=${{ github.repository }}
            org.opencontainers.image.version=${{ needs.set-version.outputs.image_version }}
            org.opencontainers.image.created=${{ github.event.head_commit.timestamp || github.event.repository.pushed_at || github.event.repository.updated_at }}
            org.opencontainers.image.revision=${{ github.sha }}
            org.opencontainers.image.authors=${{ github.actor }}
            org.opencontainers.image.url=ghcr.io/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}
            org.opencontainers.image.build_id=${{ github.run_id }}
            org.opencontainers.image.build_number=${{ github.run_number }}
          outputs: type=registry
      
      - name: Scan Linux image with Trivy
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ghcr.io/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}:${{ needs.set-version.outputs.image_version }}
          format: sarif
          timeout: 30m
          vuln-type: os
          skip-files: '**/__pycache__/**,**/share/doc/**'
          scanners: vuln  # skip secret scanning for lower memory
          ignore-unfixed: true
          exit-code: 1
          severity: CRITICAL
          output: trivy-linux.sarif
        continue-on-error: true
      
      - name: Upload Linux SARIF
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: trivy-linux.sarif
        continue-on-error: true

      - name: Upload Trivy reports as artifacts
        uses: actions/upload-artifact@v4
        with:
          name: trivy-reports
          path: |
            trivy-linux.sarif
        continue-on-error: true

      - name: Get Linux image digests
        id: linux-digests
        run: |
          RAW=$(docker buildx imagetools inspect --raw ghcr.io/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}:${{ needs.set-version.outputs.image_version }})
          echo "RAW IMAGE: $RAW"
          DIGEST_AMD64=$(echo "$RAW" | jq -r '.manifests[] | select(.platform.architecture=="amd64" and .platform.os=="linux") | .digest')
          DIGEST_ARM64=$(echo "$RAW" | jq -r '.manifests[] | select(.platform.architecture=="arm64" and .platform.os=="linux") | .digest')
          DIGEST_UNKNOWN=$(echo "$RAW" | jq -r '.manifests[] | select(.platform.architecture=="unknown" and .platform.os=="unknown") | .digest')
          echo "DIGEST_AMD64=$DIGEST_AMD64" >> $GITHUB_OUTPUT
          echo "DIGEST_ARM64=$DIGEST_ARM64" >> $GITHUB_OUTPUT
          echo "DIGEST_UNKNOWN=$DIGEST_UNKNOWN" >> $GITHUB_OUTPUT

  # build-and-push-windows:
  #   needs: set-version
  #   runs-on: windows-latest # ⚠️ Prefer self-hosted Windows runner
  #   permissions:
  #     contents: write
  #     packages: write
  #     security-events: write
  #   steps:
  #     - name: Checkout repo
  #       uses: actions/checkout@v5
  #     - name: Login to GHCR
  #       uses: docker/login-action@v3
  #       with:
  #         registry: ghcr.io
  #         username: ${{ github.actor }}
  #         password: ${{ secrets.GITHUB_TOKEN }}
  #     - name: Build and push Windows image
  #       run: |
  #         docker build -f Dockerfile.windows `
  #           -t ghcr.io/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}:${{ needs.set-version.outputs.image_version }}-windows `
  #           .
  #         docker push ghcr.io/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}:${{ needs.set-version.outputs.image_version }}-windows
  #     - name: Install Trivy on Windows
  #       shell: pwsh
  #       run: |
  #         Invoke-WebRequest -Uri https://github.com/aquasecurity/trivy/releases/latest/download/trivy_0.56.2_Windows-64bit.zip -OutFile trivy.zip
  #         Expand-Archive trivy.zip -DestinationPath $env:USERPROFILE\trivy
  #         echo "$env:USERPROFILE\trivy" >> $env:GITHUB_PATH
  #     - name: Scan Windows image with Trivy
  #       shell: pwsh
  #       run: |
  #         trivy image --format sarif `
  #           --output trivy-windows.sarif `
  #           ghcr.io/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}:${{ needs.set-version.outputs.image_version }}-windows
  #     - name: Upload Windows SARIF
  #       uses: github/codeql-action/upload-sarif@v3
  #       with:
  #         sarif_file: trivy-windows.sarif
  #       continue-on-error: true

  release:
    needs: [set-version, build-and-push-linux]
    permissions:
      contents: write
      packages: read
      security-events: read
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v5
      - name: Create Git tag and push
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git tag ${{ needs.set-version.outputs.image_version }}
          git push origin ${{ needs.set-version.outputs.image_version }}
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ needs.set-version.outputs.image_version }}
          name: Release ${{ needs.set-version.outputs.image_version }}
          body: |
            # Release v${{ needs.set-version.outputs.image_version }} BullOS GitHub Runner Docker 
            ## Github Standalone Runner Docker Image for Linux
            #### Date: ${{ github.event.head_commit.timestamp || github.event.repository.pushed_at || github.event.repository.updated_at }}
            ---
            
            ### Summary
            This release of the BullOS GitHub Runner Docker image includes the following changes:
            - **Version:** ${{ needs.set-version.outputs.image_version }}
            - **Release Type:** ${{ needs.set-version.outputs.bump_type }}
            - **Release Date:** ${{ github.event.head_commit.timestamp || github.event.repository.pushed_at || github.event.repository.updated_at }}
            - **Release Author:** ${{ github.actor }}
            - **Runner Version:** ${{ needs.build-and-push-linux.outputs.runner_version }}
            - **Base Image:** Ubuntu 24.04 LTS (Latest)
            - **Runner Image Base:** Debian Bullseye slim
            - **Runner Features:** Supports both AMD64 and ARM64 architectures
            - **Build Id:** ${{ github.run_id }}
            - **Build Number:** ${{ github.run_number }}


            - **Commits in this release:**
              ${{ needs.set-version.outputs.bump_commits }}


            **Docker Images:**
            - Linux multi-arch:
              - tags:
                - ghcr.io/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}:${{ needs.set-version.outputs.image_version }}
                - ghcr.io/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}:latest
              - digests:
                - amd64: ${{ needs.build-and-push-linux.outputs.DIGEST_AMD64 }}
                - arm64: ${{ needs.build-and-push-linux.outputs.DIGEST_ARM64 }}
                - unknown: ${{ needs.build-and-push-linux.outputs.DIGEST_UNKNOWN }}

            ### Notes
            - This release includes security vulnerability scans performed by Trivy. Please refer to the SARIF reports for details.
            - For Windows image, please refer to the commit history for changes as Windows build is currently disabled.
            ---
            

#            - Windows:
#              ghcr.io/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}:${{ needs.set-version.outputs.image_version }}-windows
